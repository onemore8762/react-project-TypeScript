{"version":3,"file":"static/js/273.9960efc8.chunk.js","mappings":"wKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCQpMA,EAAc,SAACC,GACxB,IAAOC,EAAYD,EAAZC,KACDC,EAAO,YADMF,EAANG,GAEb,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,OCLnBM,EAAU,SAACP,GACpB,IAAOQ,EAAWR,EAAXQ,QACP,OAAO,gBAAKJ,UAAWC,EAAhB,SAA4BG,K,qECgCjCC,EAA+C,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,iBACnD,OACI,0BACI,SAAC,KAAD,CACIC,cAAe,CAACC,WAAY,IAC5BC,SAAU,SAACC,GACP,IAAMC,EAA+C,GAIrD,OAHID,EAAOF,WAAWI,OAAS,KAC3BD,EAAOH,WAAP,wBAAqC,GAArC,aAEGG,GAEXE,SAAU,SAACH,EAAQI,GACfR,EAAiBI,GACjBI,EAAcC,cAAc,aAAc,KAXlD,SAcK,gBAAEC,EAAF,EAAEA,WAAYD,EAAd,EAAcA,cAAeE,EAA7B,EAA6BA,cAAeN,EAA5C,EAA4CA,OAAQO,EAApD,EAAoDA,QAApD,OACG,UAAC,KAAD,CAAMC,MAAO,CAACC,QAAS,OAAQC,cAAe,UAA9C,WACI,4BACI,SAAC,IAAD,CAAOC,MAAOL,EAAc,cAAcK,MACpCC,SAAU,SAACC,GAAD,OAAOT,EAAc,aAAcS,EAAEC,cAAcH,QAC7DH,MAAO,CAACO,MAAO,IAAKC,YAAa,IACjCC,YAAa,gBAEnB,SAAC,IAAD,CAAQC,QAASb,EAAjB,qBAIHL,EAAOH,YAAcU,EAAQV,aAAc,kBAAMW,MAAO,CAACW,MAAM,OAApB,cAA8BnB,EAAOH,uBASzG,EArE0B,WACtB,IAAMuB,GAAUC,EAAAA,EAAAA,GAAeC,EAAAA,GAAAA,SACzB7B,GAAU4B,EAAAA,EAAAA,GAAeC,EAAAA,GAAAA,SACzBC,GAAWC,EAAAA,EAAAA,KAMjB,OACI,iBAAKnC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK8B,EAAQK,KAAI,SAAAC,GACT,OAAO,SAAC1C,EAAD,CAAyBE,KAAMwC,EAAGxC,KAAME,GAAIsC,EAAGtC,IAA7BsC,EAAGtC,UAGpC,iBAAKC,UAAWC,EAAhB,UACKG,EAAQgC,KAAI,SAAAC,GACT,OAAO,SAAClC,EAAD,CAAqBC,QAASiC,EAAGjC,QAASL,GAAIsC,EAAGtC,IAAnCsC,EAAGtC,QAE5B,SAACM,EAAD,CAAgBC,iBAfX,SAAC,GAA0C,IAAzCE,EAAwC,EAAxCA,WACf0B,GAASI,EAAAA,EAAAA,IAAc9B","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__VOe6E\",\"dialogsItems\":\"Dialogs_dialogsItems__PbVo0\",\"dialog\":\"Dialogs_dialog__w6jcq\",\"active\":\"Dialogs_active__Xyy7s\",\"messages\":\"Dialogs_messages__buCyh\",\"message\":\"Dialogs_message__ggpd9\"};","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsItemsProps = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItems = (props: DialogsItemsProps) => {\r\n    const {name, id} = props\r\n    const path = '/dialogs/' + id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n    id: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    const {message} = props\r\n    return <div className={s.message}>{message}</div>\r\n}\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {DialogItems} from \"./DialogItems/DialogItems\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {SendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {useAppSelector} from \"../../common/hooks/useAppSelector\";\r\nimport {useAppDispatch} from \"../../common/hooks/useAppDispatch\";\r\nimport {selectDialogPage} from \"../../common/selectors/selectors\";\r\nimport {Form, Formik, FormikErrors} from \"formik\";\r\nimport {Button, Input} from \"antd\";\r\n\r\n\r\nconst Dialogs: React.FC = () => {\r\n    const dialogs = useAppSelector(selectDialogPage.Dialogs)\r\n    const message = useAppSelector(selectDialogPage.Message)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const onSubmit = ({newMessage}: { newMessage: string }) => {\r\n        dispatch(SendMessageAC(newMessage))\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogs.map(el => {\r\n                    return <DialogItems key={el.id} name={el.name} id={el.id}/>\r\n                })}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {message.map(el => {\r\n                    return <Message key={el.id} message={el.message} id={el.id}/>\r\n                })}\r\n                <AddMessageForm onSubmitCallBack={onSubmit}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    onSubmitCallBack: ({newMessage}: { newMessage: string }) => void\r\n}\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormType> = ({onSubmitCallBack}) => {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{newMessage: ''}}\r\n                validate={(values) => {\r\n                    const errors: FormikErrors<{ newMessage: string }> = {}\r\n                    if (values.newMessage.length > 50) {\r\n                        errors.newMessage = `Max length is ${50} symbols`\r\n                    }\r\n                    return errors\r\n                }}\r\n                onSubmit={(values, formikHelpers) => {\r\n                    onSubmitCallBack(values)\r\n                    formikHelpers.setFieldValue('newMessage', '')\r\n                }}\r\n            >\r\n                {({submitForm, setFieldValue, getFieldProps, errors, touched}) => (\r\n                    <Form style={{display: 'flex', flexDirection: 'column'}}>\r\n                        <div>\r\n                            <Input value={getFieldProps('newMessage').value}\r\n                                  onChange={(e) => setFieldValue('newMessage', e.currentTarget.value)}\r\n                                  style={{width: 200, marginRight: 10}}\r\n                                  placeholder={'Enter user'}\r\n                        />\r\n                            <Button onClick={submitForm}>\r\n                                Find\r\n                            </Button>\r\n                        </div>\r\n                        {errors.newMessage && touched.newMessage && <span style={{color:'red'}}> {errors.newMessage}</span>}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs"],"names":["DialogItems","props","name","path","id","className","s","to","Message","message","AddMessageForm","onSubmitCallBack","initialValues","newMessage","validate","values","errors","length","onSubmit","formikHelpers","setFieldValue","submitForm","getFieldProps","touched","style","display","flexDirection","value","onChange","e","currentTarget","width","marginRight","placeholder","onClick","color","dialogs","useAppSelector","selectDialogPage","dispatch","useAppDispatch","map","el","SendMessageAC"],"sourceRoot":""}