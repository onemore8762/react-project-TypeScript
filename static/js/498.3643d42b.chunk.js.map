{"version":3,"file":"static/js/498.3643d42b.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","redux/hooks.ts","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Posts.module.css?b7f9","components/Profile/MyPosts/Posts/Posts.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\n\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nexport const ProfileStatusWithHooks = (props: PropsType) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(status)\n    },[props.status])\n\n    const activeEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deActiveEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const keyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            deActiveEditMode()\n        }\n    }\n\n    return (\n        <>\n            {!editMode &&\n                <div>\n                    <b>Status:</b>\n                    <span onDoubleClick={activeEditMode}>{props.status || \"Not status\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <b>Status:</b>\n                    <input onKeyDown={keyDown} onChange={onStatusChange} autoFocus={true} onBlur={deActiveEditMode}\n                           value={status}></input>\n                </div>\n            }\n        </>\n    );\n}\n\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { AppStateType, AppDispatch } from './redux-store'\n\nexport const useAppDispatch: () => AppDispatch = useDispatch\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector","import React, {useState} from \"react\";\nimport {Field, Form, Formik} from \"formik\";\nimport {useAppDispatch, useAppSelector} from \"../../../redux/hooks\";\nimport {saveProfile} from \"../../../redux/profile-reducer\";\nimport {Contact} from \"./ProfileInfo\";\n\n\nexport const ProfileFormik = ({setEditMode}: any) => {\n    const [error, setError] = useState('')\n    const dispatch = useAppDispatch()\n    const profile = useAppSelector(state => state.profilePage.profile)\n    return <Formik\n        initialValues={profile}\n        onSubmit={(values, actions) => {\n            actions.setSubmitting(true)\n            dispatch(saveProfile(profile.userId, values))\n                .then(() => {\n                    setEditMode()\n                })\n                .catch((error) => {\n                    setError(error)\n                })\n                .finally(() => {\n                    actions.setSubmitting(false)\n                })\n\n        }}\n    >{\n        ({isSubmitting}) => {\n            return <Form>\n                <span style={{color: '#ff0000', backgroundColor: '#fff'}}>\n                    {error && error}\n                </span> <br/>\n                <button type=\"submit\" disabled={isSubmitting}>save</button>\n                <div>\n                    <b>Full name</b>:\n                    <div>\n                        <Field id=\"fullName\" name=\"fullName\" placeholder=\"Full name\" /> {/*component={InputForm}*/}\n                    </div>\n                </div>\n                <div>\n                    <b>Looking for a job</b> :\n                    <div>\n                        <Field id=\"lookingForAJob\" name=\"lookingForAJob\" type={'checkbox'}/>\n                    </div>\n                </div>\n                <div>\n                    <b>My professional skills</b>:\n                    <div>\n                        <Field id=\"lookingForAJobDescription\" name=\"lookingForAJobDescription\" placeholder=\"\"/>\n                    </div>\n                </div>\n                <div>\n                    <b>About me</b>:\n                    <div>\n                        <Field id=\"aboutMe\" name=\"aboutMe\" placeholder=\"About Me\"/>\n                    </div>\n                </div>\n                <div>\n                    <b>Contacts</b>: {Object.keys(profile.contacts).map((key: string) => {\n                    return <div key={key}>\n                        <Contact key={key} contactTitle={key}></Contact>\n                        <Field placeholder={key} id={key} name={'contacts.' + key}/>\n                    </div>\n                })}\n                </div>\n            </Form>\n        }\n\n    }\n\n    </Formik>\n}\n","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport photoProfile from '../../../assets/images/user.png'\nimport {ProfileType} from \"../../../redux/profile-reducer\";\nimport {ProfileFormik} from \"./ProfileDataForm\";\n\ntype ProfileInfoType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean;\n    savePhoto: (photoFile: any) => void\n    saveProfile: (userId: string, FormData: any) => void\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n\n    const [editMode, setEditMode] = useState(false)\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    const onchangePhoto = (e: ChangeEvent<HTMLInputElement>) => {\n        if(e.currentTarget.files?.length){\n            props.savePhoto(e.currentTarget.files[0])\n        }\n    }\n\n    return (\n        <div>\n            <div>\n                <img src=\"https://interier-foto.ru/wp-content/uploads/dlinnye-foto-4.jpg\" width={'950px'} alt='photo'/>\n            </div>\n            <h2>{props.profile.fullName}</h2>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large || photoProfile} alt='userPhoto' height={'200px'}/>\n                {props.isOwner && <input type={'file'} onChange={onchangePhoto}/>}\n                {!editMode && <ProfileData profile={props.profile}\n                                           setEditMode={() => setEditMode(true)}\n                                           isOwner={props.isOwner}\n                />\n                }\n                {editMode && <ProfileFormik profile={props.profile}\n                                            setEditMode={() => setEditMode(false)}\n                                           /* initialValues={props.profile}*/\n                />\n                }\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    );\n};\n\ntype ContactType = {\n    contactTitle: string\n    contactValue?: string\n}\n\nexport const Contact : React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div><b>{contactTitle}</b>: {contactValue}</div>\n}\n\ntype ProfileDataType = {\n    profile: ProfileType\n    setEditMode: () => void\n    isOwner: boolean\n}\n\nconst ProfileData = (props: ProfileDataType) => {\n    return <div>\n        {props.isOwner && <button onClick={props.setEditMode}>edit</button>}\n        <div>\n            <b>Full name</b>: {props.profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b> : {props.profile.lookingForAJob? 'yes' : 'no'}\n        </div>\n        <div>\n            <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\n        </div>\n        <div>\n            <b>About me</b>: {props.profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map((key: string)=> {\n            return <Contact key={key} contactTitle={key} contactValue={(props.profile.contacts as any)[key]}></Contact>\n        })}\n        </div>\n    </div>\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Posts_item__jWd++\"};","import React from 'react';\nimport s from './Posts.module.css';\n\ntype PostsPropsType = {\n    message: string\n    like: number\n\n}\nexport const Posts: React.FC<PostsPropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://i.pinimg.com/originals/9c/77/46/9c7746225873e02d83b9315501b8dd2f.jpg\" alt={'photo'}/>\n            {props.message}\n\n            <div>\n                <span>like {props.like}</span>\n            </div>\n        </div>\n\n    );\n}","import React from 'react';\nimport s from './MyPosts.module.css';\nimport {Posts} from \"./Posts/Posts\";\nimport {postType} from \"../../../redux/profile-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\ntype MyPostsType = {\n    addPost: (post: string) => void\n    posts: Array<postType>\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLength(10)\n\nexport const MyPosts: React.FC<MyPostsType> = React.memo(({addPost, posts}) => {\n\n        const onSubmit = (FormData: FormDataType) => {\n            addPost(FormData.newPostText)\n        }\n        return (\n            <div className={s.postsBlock}>\n                MyPosts\n                <AddNewPostReduxForm onSubmit={onSubmit}/>\n                <div className={s.posts}>\n                    {posts.map(el => {\n                        return <Posts key={el.id} message={el.message} like={el.likesCount}/>\n                    })}\n\n                </div>\n            </div>\n\n        );\n    }\n)\n\n\nconst AddNewPostForm : React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field placeholder={'Введите пост'} name={'newPostText'} component={Textarea}\n            validate={[required, maxLength10]}></Field>\n        </div>\n        <div>\n            <button>Add</button>\n        </div>\n    </form>\n}\n\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'Posts'})(AddNewPostForm)","import React from 'react';\nimport {AddPostAC, postType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToPropsType = {\n    posts: Array<postType>\n}\n\ntype mapDispatchToPropsType ={\n    addPost: (post: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType) : mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch)  : mapDispatchToPropsType=> {\n    return {\n        addPost: (post: string) => {\n            dispatch(AddPostAC(post))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainer\";\nimport {ProfileType} from \"../../redux/profile-reducer\";\n\ntype ProfileTypeProps ={\n    profile:  ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (photoFile: any) => void\n    saveProfile: (userId: string, FormData: any) => void\n\n}\n\nexport const Profile = (props : ProfileTypeProps) => {\n\n    return (\n        <>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}\n                         isOwner={props.isOwner}\n                         savePhoto={props.savePhoto}\n                         saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer />\n        </>\n\n    );\n}","import React from 'react';\nimport {compose} from 'redux'\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getStatus,\n    getUserProfile,\n    ProfileType,\n    savePhoto,\n    saveProfile,\n    updateStatus\n} from \"../../redux/profile-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\ntype PathParamsType = {\n    userId: string | undefined\n}\n\n\ntype ownPropsType = mapStateToProps & mapDispatchToProps\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    refreshProfile() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId?.toString()\n            if(!userId){\n                this.props.history.push('/login')\n            }\n        }\n        if (userId) {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if(this.props.match.params.userId !== prevProps.match.params.userId){\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Profile profile={this.props.profile}\n                         status={this.props.status}\n                         updateStatus={this.props.updateStatus}\n                         isOwner={!this.props.match.params.userId}\n                         savePhoto={this.props.savePhoto}\n                         saveProfile={this.props.saveProfile}\n                />\n            </>\n\n        );\n    }\n}\n\n\ntype mapStateToProps = {\n    profile:  ProfileType\n    status: string\n    authorizedUserId: number | null\n}\n\ntype mapDispatchToProps = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (photoFile: any) => void\n    saveProfile: (userId: string, FormData: any) => void\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToProps => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId\n})\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter,\n    /* withAuthRedirect*/\n)(ProfileContainer)\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deActiveEditMode","updateStatus","onDoubleClick","onKeyDown","e","key","onChange","currentTarget","value","autoFocus","onBlur","useAppDispatch","useDispatch","useAppSelector","useSelector","ProfileFormik","error","setError","dispatch","profile","state","profilePage","initialValues","onSubmit","values","actions","setSubmitting","saveProfile","userId","then","catch","finally","isSubmitting","style","color","backgroundColor","type","disabled","id","name","placeholder","Object","keys","contacts","map","Contact","contactTitle","ProfileInfo","Preloader","src","width","alt","fullName","className","s","photos","large","photoProfile","height","isOwner","files","length","savePhoto","ProfileData","contactValue","onClick","lookingForAJob","lookingForAJobDescription","aboutMe","Posts","message","like","maxLength10","maxLength","MyPosts","React","addPost","posts","AddNewPostReduxForm","FormData","newPostText","el","likesCount","reduxForm","form","handleSubmit","Field","component","Textarea","validate","required","MyPostsContainer","connect","post","AddPostAC","Profile","ProfileContainer","this","match","params","authorizedUserId","toString","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","withRouter"],"sourceRoot":""}