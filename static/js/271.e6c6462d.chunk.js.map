{"version":3,"file":"static/js/271.e6c6462d.chunk.js","mappings":"sOACA,EAA4B,4B,6BCyBtBA,EAAO,WAET,IAAMC,GAAWC,EAAAA,EAAAA,KAUjB,OARAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,GAASG,EAAAA,EAAAA,OACF,WACHH,GAASI,EAAAA,EAAAA,UAEd,CAACJ,KAIA,4BACI,SAACK,EAAD,KACA,SAACC,EAAD,QAMND,EAAqB,WAEvB,IAAME,GAAWC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,YAC9CI,GAAmBC,EAAAA,EAAAA,QAAuB,MAChD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAgBA,OALAb,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAbY,IACC,UAAAH,EAAiBK,eAAjB,SAA0BC,eAAe,CAACC,MAAO,MAAMC,SAAU,cAEtE,CAACZ,EAAUO,KAEV,iBAAKM,MAAO,CAACC,OAAQ,IAAKC,UAAW,QAASC,SAf5B,SAACC,GACnB,IAAIC,EAAUD,EAAEE,cACbD,EAAQE,aAAeF,EAAQG,YAAcH,EAAQI,cACnDf,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUpC,iBACKR,QADL,IACKA,OADL,EACKA,EAAUuB,KAAI,SAACC,EAAGC,GAAJ,OAAc,SAACC,EAAD,CAAqBC,QAASH,GAAhBC,OAC3C,gBAAKG,IAAKxB,QAKhBsB,EAAkDG,EAAAA,MAAW,YAAgB,IAAdF,EAAa,EAAbA,QACjE,OACI,iCACI,mBACA,iBAAKd,MAAO,CAACiB,QAAS,OAAQC,OAAQ,YAAtC,WACI,iBAAKlB,MAAO,CAAEmB,SAAU,KAAxB,WACI,SAAC,IAAD,CAAQC,KAAM,GAAIC,IAAKP,EAAQQ,MAAOC,MAAM,SAACC,EAAA,EAAD,OAC5C,+BAAOV,EAAQW,gBAEnB,gBAAKzB,MAAO,CAAE0B,MAAO,SAArB,SAAiCZ,EAAQA,mBAKnD5B,EAA2B,WAC7B,OAA2BO,EAAAA,EAAAA,UAAS,IAApC,eAAOqB,EAAP,KAAgBa,EAAhB,KACM/C,GAAWC,EAAAA,EAAAA,KACX+C,GAASxC,EAAAA,EAAAA,IAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKsC,UAUlD,OACI,4BACI,SAACC,EAAA,EAAD,CAAU7B,MAAO,CAAC0B,MAAO,IAAKzB,OAAQ,GAAI6B,OAAQ,QAASC,SAAU,SAAC3B,GAAD,OAAOuB,EAAQvB,EAAEE,cAAc0B,QAAQA,MAAOlB,KACnH,SAAC,IAAD,CAAQmB,QAVA,WACPnB,IAGLlC,GAASsD,EAAAA,EAAAA,IAAYpB,IACrBa,EAAQ,MAKsBQ,SAAqB,UAAXP,EAApC,gCAMZ,EA9FiB,WACb,OACI,gBAAKQ,UAAWC,EAAhB,UACI,SAAC1D,EAAD","sources":["webpack://samurai-way/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatPage_container__2f+y9\"};","import React, {useEffect, useRef, useState} from 'react';\r\nimport {Avatar, Button} from \"antd\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport s from './ChatPage.module.css'\r\nimport {useAppSelector} from \"../../common/hooks/useAppSelector\";\r\nimport {useAppDispatch} from \"../../common/hooks/useAppDispatch\";\r\n\r\ntype ChatMessageType = {\r\n    userId: number\r\n    userName: string\r\n    message: string\r\n    photo: string\r\n}\r\n\r\n\r\nconst ChatPage = () => {\r\n    return (\r\n        <div className={s.container}>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Chat = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const messages = useAppSelector(state => state.chat.messages)\r\n    const messageAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll ,setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if(element.scrollHeight - element.scrollTop === element.clientHeight){\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        }else{\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll){\r\n            messageAnchorRef.current?.scrollIntoView({block: 'end',behavior: 'smooth'})\r\n        }\r\n    }, [messages, isAutoScroll])\r\n    return (\r\n        <div style={{height: 400, overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages?.map((m, index) => <Message key={index} message={m}/>)}\r\n            <div ref={messageAnchorRef}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Message: React.FC<{ message: ChatMessageType }> = React.memo(({message}) => {\r\n    return (\r\n        <>\r\n            <hr/>\r\n            <div style={{display: 'flex', margin: '15px 5px'}}>\r\n                <div style={{ minWidth: 100}}>\r\n                    <Avatar size={60} src={message.photo} icon={<UserOutlined/>}/>\r\n                    <div> {message.userName}</div>\r\n                </div>\r\n                <div style={{ width: '210px'}}>{ message.message}</div>\r\n            </div>\r\n        </>\r\n    );\r\n})\r\nconst AddMessageForm: React.FC = () => {\r\n    const [message, setText] = useState('')\r\n    const dispatch = useAppDispatch()\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n\r\n    const onClick = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setText('')\r\n    }\r\n    return (\r\n        <div>\r\n            <TextArea style={{width: 200, height: 25, resize: 'none'}} onChange={(e) => setText(e.currentTarget.value)} value={message}></TextArea>\r\n            <Button onClick={onClick} disabled={status !== 'ready'}> Send message </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ChatPage"],"names":["Chat","dispatch","useAppDispatch","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","useAppSelector","state","chat","messageAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","block","behavior","style","height","overflowY","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","React","display","margin","minWidth","size","src","photo","icon","UserOutlined","userName","width","setText","status","TextArea","resize","onChange","value","onClick","sendMessage","disabled","className","s"],"sourceRoot":""}