{"version":3,"file":"static/js/712.c813a973.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Posts/Posts.module.css?b7f9","components/Profile/MyPosts/Posts/Posts.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\"};","import React, {ChangeEvent, KeyboardEvent, useEffect, useState} from 'react';\n\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nexport const ProfileStatusWithHooks = (props: PropsType) => {\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(status)\n    },[props.status])\n\n    const activeEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deActiveEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const keyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            deActiveEditMode()\n        }\n    }\n\n    return (\n        <>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activeEditMode}>{props.status || \"Not status\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onKeyDown={keyDown} onChange={onStatusChange} autoFocus={true} onBlur={deActiveEditMode}\n                           value={status}></input>\n                </div>\n            }\n        </>\n    );\n}\n\n","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {profileType} from \"../ProfileContainer\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoType = {\n    profile: profileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo = (props: ProfileInfoType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div>\n                <img src=\"https://interier-foto.ru/wp-content/uploads/dlinnye-foto-4.jpg\" width={'950px'} alt='photo'/>\n            </div>\n            <h2>{props.profile.fullName}</h2>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile?.photos.large} alt='userPhoto'/>\n               {/* <div> {props.profile.aboutMe}</div>*/}\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Posts_item__jWd++\"};","import React from 'react';\nimport s from './Posts.module.css';\n\ntype PostsPropsType = {\n    message: string\n    like: number\n\n}\nexport const Posts: React.FC<PostsPropsType> = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://i.pinimg.com/originals/9c/77/46/9c7746225873e02d83b9315501b8dd2f.jpg\" alt={'photo'}/>\n            {props.message}\n\n            <div>\n                <span>like {props.like}</span>\n            </div>\n        </div>\n\n    );\n}","import React from 'react';\nimport s from './MyPosts.module.css';\nimport {Posts} from \"./Posts/Posts\";\nimport {postType} from \"../../../redux/profile-reducer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\ntype MyPostsType = {\n    addPost: (post: string) => void\n    posts: Array<postType>\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLength(10)\n\nexport const MyPosts: React.FC<MyPostsType> = React.memo(({addPost, posts}) => {\n\n        const onSubmit = (FormData: FormDataType) => {\n            addPost(FormData.newPostText)\n        }\n        return (\n            <div className={s.postsBlock}>\n                MyPosts\n                <AddNewPostReduxForm onSubmit={onSubmit}/>\n                <div className={s.posts}>\n                    {posts.map(el => {\n                        return <Posts key={el.id} message={el.message} like={el.likesCount}/>\n                    })}\n\n                </div>\n            </div>\n\n        );\n    }\n)\n\n\nconst AddNewPostForm : React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field placeholder={'Введите пост'} name={'newPostText'} component={Textarea}\n            validate={[required, maxLength10]}></Field>\n        </div>\n        <div>\n            <button>Add</button>\n        </div>\n    </form>\n}\n\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'Posts'})(AddNewPostForm)","import React from 'react';\nimport {AddPostAC, postType} from \"../../../redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {connect} from \"react-redux\";\n\n\ntype mapStateToPropsType = {\n    posts: Array<postType>\n}\n\ntype mapDispatchToPropsType ={\n    addPost: (post: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType) : mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch)  : mapDispatchToPropsType=> {\n    return {\n        addPost: (post: string) => {\n            dispatch(AddPostAC(post))\n        }\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainer\";\nimport {profileType} from \"./ProfileContainer\";\n\ntype ProfileType ={\n    profile: profileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const Profile = (props : ProfileType) => {\n\n    return (\n        <>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </>\n\n    );\n}","import React from 'react';\nimport {compose} from 'redux'\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\n\nexport type profileType = {\n\n    aboutMe: string | null,\n    contacts: {\n        facebook: string | null,\n        \"website\": string | null,\n        vk: string | null,\n        twitter: string | null,\n        instagram: string | null,\n        youtube: string | null,\n        github: string | null,\n        mainLink: string | null\n    },\n    lookingForAJob: boolean,\n    lookingForAJobDescription: string | null,\n    fullName: string,\n    userId: string,\n    \"photos\": {\n        \"small\": string | null,\n        \"large\": string\n\n    }\n}\n\ntype PathParamsType = {\n    userId: string | undefined\n}\n\n\ntype ownPropsType = mapStateToProps & mapDispatchToProps\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId?.toString()\n            if(!userId){\n                this.props.history.push('/login')\n            }\n        }\n        if (userId) {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Profile profile={this.props.profile} status={this.props.status}\n                         updateStatus={this.props.updateStatus}/>\n            </>\n\n        );\n    }\n}\n\n\ntype mapStateToProps = {\n    profile: profileType | null\n    status: string\n    authorizedUserId: number | null\n}\n\ntype mapDispatchToProps = {\n    getUserProfile: (userId: string) => void\n    getStatus: (userId: string) => void\n    updateStatus: (status: string) => void\n}\n\nlet mapStateToProps = (state: AppStateType): mapStateToProps => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId\n})\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    /* withAuthRedirect*/\n)(ProfileContainer)\n"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","deActiveEditMode","updateStatus","onDoubleClick","onKeyDown","e","key","onChange","currentTarget","value","autoFocus","onBlur","ProfileInfo","profile","src","width","alt","fullName","className","s","photos","large","Preloader","Posts","message","like","maxLength10","maxLength","MyPosts","React","addPost","posts","AddNewPostReduxForm","onSubmit","FormData","newPostText","map","el","likesCount","id","reduxForm","form","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","post","AddPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","getStatus","compose","auth","withRouter"],"sourceRoot":""}